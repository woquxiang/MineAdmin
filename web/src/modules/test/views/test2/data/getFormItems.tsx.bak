/**
 * MineAdmin is committed to providing solutions for quickly building web applications
 * Please view the LICENSE file that was distributed with this source code,
 * For the full copyright and license information.
 * Thank you very much for using MineAdmin.
 *
 * @Author X.Mo<root@imoi.cn>
 * @Link   https://github.com/mineadmin
 */
import type { MaFormItem } from '@mineadmin/form'
import type { RoleVo } from '~/base/api/role.ts'
import MaDictRadio from '@/components/ma-dict-picker/ma-dict-radio.vue'

import { h } from 'vue';
import { ElSelect, ElOption } from 'element-plus';
import { ElCheckboxGroup, ElCheckbox } from 'element-plus';


export default function getFormItems(formType: 'add' | 'edit' = 'add', t: any, model: RoleVo): MaFormItem[] {
  if (formType === 'add') {
    model.status = 1
    model.sort = 0
  }

  const options = [
    { label: 'Admin', value: 'admin' },
    { label: 'User', value: 'user' },
    { label: 'Guest', value: 'guest' },
  ];

  const checkboxOptions = [
    { label: t('baseRoleManage.view'), value: 'view' },
    { label: t('baseRoleManage.edit'), value: 'edit' },
    { label: t('baseRoleManage.delete'), value: 'delete' },
  ];

  return [
    {
      label: () => t('baseRoleManage.name'),
      prop: 'name',
      render: 'input',
      renderProps: {
        placeholder: t('form.pleaseInput', { msg: t('baseRoleManage.name') }),
      },
      itemProps: {
        rules: [{ required: true, message: t('form.requiredInput', { msg: t('baseRoleManage.name') }) }],
      },
    },
    {
      label: () => t('baseRoleManage.code'),
      prop: 'code',
      render: 'input',
      renderProps: {
        placeholder: t('form.pleaseInput', { msg: t('baseRoleManage.code') }),
      },
      itemProps: {
        rules: [{ required: true, message: t('form.requiredInput', { msg: t('baseRoleManage.code') }) }],
      },
    },
    {
      label: () => t('crud.sort'),
      prop: 'sort',
      render: 'inputNumber',
      cols: { md: 12, xs: 24 },
      renderProps: {
        placeholder: t('form.pleaseInput', { msg: t('crud.sort') }),
        class: 'w-full',
      },
    },
    {
      label: () => t('crud.status'),
      prop: 'status',
      render: () => MaDictRadio,
      cols: { md: 12, xs: 24 },
      renderProps: {
        placeholder: t('form.pleaseInput', { msg: t('crud.status') }),
        dictName: 'system-status',
      },
    },
    {
      label: () => t('baseRoleManage.roleType'),
      prop: 'roleType',
      render: () =>
        h(
          ElSelect,
          {
            placeholder: t('form.pleaseSelect', { msg: t('baseRoleManage.roleType') }),
            modelValue: model.roleType,
            'onUpdate:modelValue': (value: string) => (model.roleType = value),
          },
          {
            default: () =>
              options.map(option =>
                h(ElOption, { label: option.label, value: option.value })
              ),
          }
        ),
      itemProps: {
        rules: [{ required: true, message: t('form.requiredSelect', { msg: t('baseRoleManage.roleType') }) }],
      },
    },
    {
      label: () => t('baseRoleManage.permissions'),
      prop: 'permissions',
      render: () => (
        <el-checkbox-group>
          <el-checkbox label={t('baseRoleManage.view')} value="view" />
          <el-checkbox label={t('baseRoleManage.edit')} value="edit" />
          <el-checkbox label={t('baseRoleManage.delete')} value="delete" />
        </el-checkbox-group>
      ),
      itemProps: {
        rules: [{ required: true, message: t('form.requiredSelect', { msg: t('baseRoleManage.permissions') }) }],
      },
    },
    {
      label: () => t('baseMenuManage.type'), prop: 'meta.type', render: () => (
        <el-radio-group>
          <el-radio-button label={t('baseMenuManage.typeItem.M')} value="M"></el-radio-button>
          <el-radio-button label={t('baseMenuManage.typeItem.B')} value="B"></el-radio-button>
          <el-radio-button label={t('baseMenuManage.typeItem.L')} value="L"></el-radio-button>
          <el-radio-button label={t('baseMenuManage.typeItem.I')} value="I"></el-radio-button>
        </el-radio-group>
      ),
      cols: { lg: 12, md: 24 },
    },
    {
      label: () => t('baseRoleManage.permissions'),
      prop: 'permissions',
      render: () =>
        h(
          ElCheckboxGroup,
          {
            modelValue: model.permissions,
            'onUpdate:modelValue': (value: string[]) => (model.permissions = value),
          },
          {
            default: () =>
              checkboxOptions.map(option =>
                h(ElCheckbox, { label: option.label, value: option.value })
              ),
          }
        ),
      itemProps: {
        rules: [{ required: true, message: t('form.requiredSelect', { msg: t('baseRoleManage.permissions') }) }],
      },
    },
  ]
}
